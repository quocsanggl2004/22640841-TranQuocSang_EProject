name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  # Job 1: Run Tests
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    # Install all dependencies
    - name: Install auth dependencies
      working-directory: ./auth
      run: npm install
    
    - name: Install product dependencies
      working-directory: ./product
      run: npm install
    
    # Start auth service in background
    - name: Start auth service
      working-directory: ./auth
      run: |
        nohup npm start > auth.log 2>&1 &
        AUTH_PID=$!
        echo "Auth service PID: $AUTH_PID"
        echo "Waiting for auth service to start..."
        
        SUCCESS=false
        for i in {1..30}; do
          if curl -f http://localhost:3000/health 2>/dev/null; then
            echo "Auth service is ready!"
            SUCCESS=true
            break
          fi
          echo "Waiting... ($i/30)"
          sleep 2
        done
        
        if [ "$SUCCESS" = false ]; then
          echo "ERROR: Auth service failed to start!"
          echo "=== Auth service logs ==="
          cat auth.log
          exit 1
        fi
      env:
        AUTH_SERVICE_PORT: 3000
        MONGODB_AUTH_URI: mongodb://admin:password@localhost:27017/auth_db?authSource=admin
        JWT_SECRET: test_secret_key
    
    # Create test user for product tests
    - name: Create test user for product tests
      run: |
        echo "Creating test user for product tests..."
        
        RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST http://localhost:3000/register \
          -H "Content-Type: application/json" \
          -d '{"username":"productuser","password":"password123"}')
        
        HTTP_STATUS=$(echo "$RESPONSE" | grep HTTP_STATUS | cut -d: -f2)
        BODY=$(echo "$RESPONSE" | grep -v HTTP_STATUS)
        
        echo "HTTP Status: $HTTP_STATUS"
        echo "Response Body: $BODY"
        
        if [ "$HTTP_STATUS" != "200" ] && [ "$HTTP_STATUS" != "400" ]; then
          echo "ERROR: Failed to create user (status: $HTTP_STATUS)"
          exit 1
        fi
        
        echo "Verifying login..."
        LOGIN=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST http://localhost:3000/login \
          -H "Content-Type: application/json" \
          -d '{"username":"productuser","password":"password123"}')
        
        LOGIN_STATUS=$(echo "$LOGIN" | grep HTTP_STATUS | cut -d: -f2)
        LOGIN_BODY=$(echo "$LOGIN" | grep -v HTTP_STATUS)
        
        echo "Login HTTP Status: $LOGIN_STATUS"
        echo "Login Response: $LOGIN_BODY"
        
        if [ "$LOGIN_STATUS" != "200" ]; then
          echo "ERROR: Failed to login (status: $LOGIN_STATUS)"
          exit 1
        fi
        
        echo "Test user created and verified successfully!"
    
    # Run product tests FIRST (needs test user)
    - name: Run product tests
      working-directory: ./product
      run: npm test
      env:
        MONGODB_PRODUCT_URI: mongodb://admin:password@localhost:27017/product_db?authSource=admin
        JWT_SECRET: test_secret_key
        RABBITMQ_URL: amqp://localhost:5672
        LOGIN_TEST_USER: productuser
        LOGIN_TEST_PASSWORD: password123
    
    # Run auth tests AFTER (will create its own users and cleanup)
    - name: Run auth tests
      working-directory: ./auth
      run: npm test
      env:
        MONGODB_AUTH_URI: mongodb://admin:password@localhost:27017/auth_db?authSource=admin
        JWT_SECRET: test_secret_key

  # Job 2: Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [auth, product, order, api-gateway]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image - ${{ matrix.service }}
      uses: docker/build-push-action@v4
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:latest
          ${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:latest
        cache-to: type=inline

  # Job 3: Deploy Notification
  notify:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always()
    
    steps:
    - name: Send notification
      run: |
        echo "Build completed with status: ${{ needs.build-and-push.result }}"
        echo "Commit SHA: ${{ github.sha }}"
        echo "Triggered by: ${{ github.actor }}"
