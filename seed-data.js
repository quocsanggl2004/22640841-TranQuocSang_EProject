// Script ƒë·ªÉ th√™m d·ªØ li·ªáu m·∫´u v√†o MongoDB
// Ch·∫°y: node seed-data.js

const { MongoClient } = require('mongodb');

const uri = 'mongodb://admin:password@localhost:27017/?authSource=admin';
const client = new MongoClient(uri);

async function seedData() {
  try {
    await client.connect();
    console.log('Connected to MongoDB');

    // 1. Th√™m Users v√†o auth_db
    const authDb = client.db('auth_db');
    const usersCollection = authDb.collection('users');
    
    const users = [
      {
        username: 'admin',
        password: '$2a$10$abcdefghijklmnopqrstuv1234567890abcdefghij' // password: admin123
      },
      {
        username: 'user1',
        password: '$2a$10$abcdefghijklmnopqrstuv1234567890abcdefghij' // password: user123
      },
      {
        username: 'user2',
        password: '$2a$10$abcdefghijklmnopqrstuv1234567890abcdefghij' // password: user123
      }
    ];

    const insertedUsers = await usersCollection.insertMany(users);
    console.log(`‚úÖ Inserted ${insertedUsers.insertedCount} users`);

    // 2. Th√™m Products v√†o product_db
    const productDb = client.db('product_db');
    const productsCollection = productDb.collection('products');
    
    const products = [
      {
        name: 'iPhone 15 Pro Max',
        price: 29990000,
        description: 'Flagship smartphone t·ª´ Apple v·ªõi chip A17 Pro'
      },
      {
        name: 'Samsung Galaxy S24 Ultra',
        price: 31990000,
        description: 'Smartphone cao c·∫•p v·ªõi b√∫t S Pen v√† camera 200MP'
      },
      {
        name: 'MacBook Pro 14" M3',
        price: 45990000,
        description: 'Laptop chuy√™n nghi·ªáp v·ªõi chip M3, RAM 16GB'
      },
      {
        name: 'iPad Air M2',
        price: 15990000,
        description: 'Tablet ƒëa nƒÉng v·ªõi chip M2 m·∫°nh m·∫Ω'
      },
      {
        name: 'AirPods Pro 2',
        price: 6490000,
        description: 'Tai nghe kh√¥ng d√¢y ch·ªëng ·ªìn ch·ªß ƒë·ªông'
      },
      {
        name: 'Dell XPS 15',
        price: 35990000,
        description: 'Laptop cao c·∫•p cho d√¢n vƒÉn ph√≤ng v√† s√°ng t·∫°o'
      },
      {
        name: 'Sony WH-1000XM5',
        price: 8990000,
        description: 'Tai nghe over-ear ch·ªëng ·ªìn t·ªët nh·∫•t'
      },
      {
        name: 'Apple Watch Ultra 2',
        price: 21990000,
        description: 'Smartwatch cao c·∫•p d√†nh cho th·ªÉ thao extreme'
      }
    ];

    const insertedProducts = await productsCollection.insertMany(products);
    console.log(`‚úÖ Inserted ${insertedProducts.insertedCount} products`);

    // 3. Th√™m Orders v√†o order_db (s·ª≠ d·ª•ng product IDs v·ª´a t·∫°o)
    const orderDb = client.db('order_db');
    const ordersCollection = orderDb.collection('orders');
    
    const productIds = Object.values(insertedProducts.insertedIds);
    
    const orders = [
      {
        products: [productIds[0], productIds[4]], // iPhone + AirPods
        totalPrice: 36480000,
        createdAt: new Date('2025-10-15')
      },
      {
        products: [productIds[2]], // MacBook Pro
        totalPrice: 45990000,
        createdAt: new Date('2025-10-16')
      },
      {
        products: [productIds[1], productIds[3]], // Samsung + iPad
        totalPrice: 47980000,
        createdAt: new Date('2025-10-17')
      },
      {
        products: [productIds[5], productIds[6]], // Dell + Sony
        totalPrice: 44980000,
        createdAt: new Date('2025-10-18')
      }
    ];

    const insertedOrders = await ordersCollection.insertMany(orders);
    console.log(`‚úÖ Inserted ${insertedOrders.insertedCount} orders`);

    console.log('\nüéâ Seeding completed successfully!');
    console.log('\nüìä Summary:');
    console.log(`   - Users: ${insertedUsers.insertedCount}`);
    console.log(`   - Products: ${insertedProducts.insertedCount}`);
    console.log(`   - Orders: ${insertedOrders.insertedCount}`);

  } catch (error) {
    console.error('‚ùå Error seeding data:', error);
  } finally {
    await client.close();
    console.log('\nConnection closed');
  }
}

seedData();
